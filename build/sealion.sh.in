#! /bin/bash

USAGE="Usage: curl -k https://agent.sealion.com | bash /dev/stdin \n\t-o <Organisation Token> \n\t[-H <Hostname>] \n\t[-c <category name>] \n\t [-h for help]"
OPTERR=0
LOCK_FILE=/usr/local/sealion-agent/var/sealion/sealion.pid
INIT_FILE=/etc/init.d/sealion
TMP_FILE_PATH=/tmp/sealion-agent

TMP_DATA_NAME=$TMP_FILE_PATH"/sealion-data.tmp"

INSTALLATION_DIRECTORY=/usr/local/sealion-agent/

USERNAME="sealion"
SYMLINK_PATHS=(K K S S S S K)
is_root=0

clean_up()
{
    for (( i = 0 ; i < $1 ; i++ )) 
    do
        sudo rm -f /etc/rc$i.d/${SYMLINK_PATHS[$i]}20sealion
    done
    sudo rm -rf $TEMP_PATH        
}


get_JSON_value()
{
    if [ $# -eq 0 ] ; then
        return 1
    fi 
    
    JSON="'$@'"
    
    version=`python -c "import json;obj=json.loads($JSON);print obj[\"agentVersion\"]"` 
    agent_token=`python -c "import json;obj=json.loads($JSON);print obj[\"agentToken\"]"`
    already_registered=`python -c "import json;obj=json.loads($JSON);print obj[\"alreadyRegistered\"]"`
    return 0
}


while getopts a:o:c:v:hH: OPT ; do
    case "$OPT" in
        v)
            version=$OPTARG
        ;;
        a)
            agent_token=$OPTARG
        ;;
        H)
            host=$OPTARG
        ;;
        h)
            printf "$USAGE \n" >&1
            exit 0
        ;;
        o)
        if [ -z $org_token ] ; then
            org_token=$OPTARG
        fi
        ;;
        c)
            tags=$OPTARG
        ;;
        \?)
            echo "Invalid argument -$OPTARG" >&2
            printf "$USAGE \n" >&2
            exit 126
        ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            printf "$USAGE \n" >&2
            exit 125
        ;;
    esac
done

running=`pgrep sealion-node | wc -w`
if [ $running -gt 0 ] ; then
    echo "Trying to stop SeaLion service"
    $INIT_FILE stop
fi

if [ -z $agent_token ] ; then

    if [ -z $org_token ] ; then
        echo "Error: No organization token found. Aborting" >&2
        exit 124
    fi

    if [ -z $host ] ; then
        host=$HOSTNAME  
    fi

    mkdir -p $TMP_FILE_PATH
    if [ $? -ne 0 ] ; then
        echo "Error: Temporary directory creation failed. Aborting" >&2
        exit 1
    fi
    
    if [ -z $tags ] ; then
        return_code=`curl -s -w "%{http_code}" -H "Content-Type: application/json" -X POST -d "{\"orgToken\":\"$org_token\", \"name\":\"$host\"}" https://api.sealion.com/agents -o $TMP_DATA_NAME`
        if [ $? -ne 0 -o $return_code -ne 200 ] ; then
            echo "Error: Installation failed. Aborting" >&2
            exit 123
        fi     
    else
        tags=\"$tags\"
        tags=${tags//,/\",\"}
        return_code=`curl -s -w "%{http_code}" -H "Content-Type: application/json" -X POST -d "{\"orgToken\":\"$org_token\", \"name\":\"$host\", \"category\":[$tags]}" https://api.sealion.com/agents -o $TMP_DATA_NAME`
        if [ $? -ne 0 -o $return_code -ne 200 ] ; then
            echo "Error: Installation failed. Aborting" >&2
            exit 123
        fi
    fi
    
    dataJSON=`cat $TMP_DATA_NAME`
    
    
    get_JSON_value $dataJSON
    if [ $? -ne 0 ] ; then
        echo "Error: Failed to parse response. Aborting" >&2   
        exit 121
    fi
    
    if [ -z $version ] ; then
        echo "Error: 'agent-version' not present in response. Aborting" >&2
        exit 119
    fi    
    
    if [ -z $agent_token ] ; then
        echo "Error: 'agent-token' not present in response. Aborting" >&2
        exit 120
    fi
    
    if [ -z $already_registered ] ; then
        echo "Error: 'already-registered' not present in response" >&2
    fi
    
    is_root=1    
        
    mkdir -p $INSTALLATION_DIRECTORY
    if [ $? -ne 0 ] ; then
        echo "Error: Directory creation failed!!!" >&2
        exit 118
    fi

    echo "Creating 'sealion' user..." >&1
    useradd -r -d $INSTALLATION_DIRECTORY $USERNAME 2> /dev/null
    tempVar=$?
    if [ $tempVar -ne 0 ] ; then
        if [ $tempVar -ne 9 ] ; then
            echo "Error: User creation failed!" >&2
            rm -r $INSTALLATION_DIRECTORY
            exit 1
        fi
    fi
    echo "Created 'sealion' user successfully" >&1

else

    if [ -z $version ] ; then 
        echo "Error: Agent-version not found"
        exit 121
    fi
    
fi    

echo "Extracting files to /usr/local/sealion-agent..." >&1
    
    MATCH=$( grep --text --line-number '^SEALION_TARFILE:$' $0 | cut -d ':' -f 1 )
    TAR_FILE_START=$(( MATCH + 1 ))
    
    tail -n +$TAR_FILE_START $0 | tar -xzf - -C $INSTALLATION_DIRECTORY --overwrite
    
    if [ $? -ne 0 ] ; then
        echo "Error: Installation failed" >&2
        if [ $is_root -eq 1 ] ; then
            userdel sealion
            rm -rf $INSTALLATION_DIRECTORY
            rm -rf $TMP_FILE_PATH
            if [ $? -ne 0 ] ; then
                echo "Error: Failed to delete temporary files" >&2
            fi
        fi
        exit 1
    fi

echo "Files extracted successfully" >&1

cd $INSTALLATION_DIRECTORY

echo "{ \"agentToken\":\"$agent_token\" , \"agentVersion\":\"$version\" }" > etc/config/agent-config.json


if [ $is_root -eq 1 ] ; then
    chown -R $USERNAME:$USERNAME $INSTALLATION_DIRECTORY

    echo "Creating /etc/init.d/sealion" >&1
    cp -u /usr/local/sealion-agent/etc/sealion $INIT_FILE
    chmod +x $INIT_FILE

    chown $USERNAME:$USERNAME $INIT_FILE

    echo "Creating start/stop links for /etc/init.d/sealion" >&1
    
    for (( i = 0 ; i < 7 ; i++ )) 
    do
        ln -sf $INIT_FILE /etc/rc$i.d/${SYMLINK_PATHS[$i]}20sealion
        if [ $? -ne 0 ] ; then
            echo "Error: Unable to update init.d files. Aborting" >&2
            clean_up $i
            exit 1
        fi
        chown -h $USERNAME:$USERNAME /etc/rc$i.d/${SYMLINK_PATHS[$i]}20sealion
    done

else

    cat etc/sealion > $INIT_FILE

fi

rm -rf $TMP_FILE_PATH
if [ $? -ne 0 ] ; then
    echo "Error: Failed to delete temporary files" >&2
fi

echo "Starting agent..." >&1
$INIT_FILE start
if [ $? -ne 0 ] ; then
    echo "Error: Service can not be started" >&2
    exit 1
else
    echo "Installation successfull. Please continue on https://sealion.com" >&1
    exit 0
fi
exit 0
